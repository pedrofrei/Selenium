		/* System.setProperty("webdriver.gecko.driver","C:/Users/IBM_ADMIN/Documents/WEBDRIVER/geckodriver.exe"); //Só usar caso não funcione a definição de PATH no SO(Esse aqui é pra Firefox)
		WebDriver driver = new FirefoxDriver(); 
		System.setProperty("webdriver.chrome.driver","C:/Users/IBM_ADMIN/Documents/WEBDRIVER/chromedriver.exe");
		WebDriver driver = new ChromeDriver();
		
		driver.manage().window().setSize(new Dimension(1200, 765)); // Define o tamanho d atela
		//driver.get("file:///C:/Users/PedroSilvaFrei/Desktop/Selenium%20Webdriver/componentes.html");// Usar este caso tenha que abrir o arquivo direto de uma pasta por exemplo
		driver.get("file:///" + System.getProperty("user.dir") +  "/src/main/resources/componentes.html");// user.dir retorna o caminho relativo ao projeto
		*/

import java.util.List;
import java.util.Arrays;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class TesteCampoTreinamento {
	
	private WebDriver driver;
	private DSL dsl;
	
	@Before
	public void inicializaChrome() {
		System.setProperty("webdriver.chrome.driver","C:/Users/IBM_ADMIN/Documents/WEBDRIVER/chromedriver.exe");
		driver = new ChromeDriver();
		driver.manage().window().setSize(new Dimension(1200, 765));
		driver.get("file:///" + System.getProperty("user.dir") +  "/src/main/resources/componentes.html");
		dsl = new DSL(driver);
	}
	
	@After
	public void finaliza() {
		driver.quit();
	}
	
	@Test
	public void testeTextField() {
		dsl.escrever("elementosForm:nome", "Teste de escrita"); //O método escreve foi criado em uma outra classe para que o código fique mais compreensivel
		Assert.assertEquals("Teste de escrita", dsl.obterValorCampo("elementosForm:nome"));
	}
	
	@Test
	public void deveInteragirComTextArea() {
		dsl.escrever("elementosForm:sugestoes", "Teste 1\nTeste 12");
		Assert.assertEquals("Teste 1\nTeste 12", dsl.obterValorCampo("elementosForm:sugestoes"));
	}
	
	@Test
	public void deveInteragirComRadioButton() {
		
		dsl.clicarRadioButton("elementosForm:sexo:0");
		Assert.assertTrue(dsl.isRadioMarcado("elementosForm:sexo:0"));
	}
	
	@Test
	public void deveInteragirComCheckbox() {
		dsl.clicarCheck("elementosForm:comidaFavorita:2");
		Assert.assertTrue(dsl.isCheckMarcado("elementosForm:comidaFavorita:2"));
	}
	
	@Test
	public void deveInteragirComCombo() {
		//combo.selectByIndex(2);// Busca pelo index que é a ordem que está no combobox 
		//combo.selectByValue("superior"); // Busca pelo Value dentro do código
		//combo.selectByVisibleText("2o grau completo"); // Procura pelo texto que está sendo mostrado pro usuario	
		dsl.selecionarCombo("elementosForm:escolaridade", "2o grau completo");
		Assert.assertEquals("2o grau completo", dsl.obterValorCombo("elementosForm:escolaridade"));
	}
	
	@Test
	public void deveVerificarValoresCombo() {
		Assert.assertEquals(8, dsl.obterQuantidadeOpcoesCombo("elementosForm:escolaridade"));
		Assert.assertTrue(dsl.verificarOpcaoCombo("elementosForm:escolaridade", "Mestrado"));
	}
	
	@Test
	public void deveVerificarValoresComboMultiplo() {	
		
		dsl.selecionarCombo("elementosForm:esportes", "Natacao");
		dsl.selecionarCombo("elementosForm:esportes", "Corrida");
		dsl.selecionarCombo("elementosForm:esportes", "O que eh esporte?");

		List<String> opcoesMarcadas = dsl.obterValoresCombo("elementosForm:esportes");
		Assert.assertEquals(3, opcoesMarcadas.size()); // Verifica se tem 3 itens selecionados
		
		dsl.deselecionarCombo("elementosForm:esportes", "Corrida");//Desmarcar a opção 'Corrida'
		opcoesMarcadas = dsl.obterValoresCombo("elementosForm:esportes");
		Assert.assertEquals(2, opcoesMarcadas.size()); // Verifica se tem 2 botões selecionados
		Assert.assertTrue(opcoesMarcadas.containsAll(Arrays.asList("Natacao", "O que eh esporte?")));
	}
	
	@Test
	public void deveInteragirComBotoes() {
		dsl.clicarBotao("buttonSimple");
		Assert.assertEquals("Obrigado!", dsl.obterValueElemento("buttonSimple"));
	}
	
	@Test //@Ignore //Não deixar rodar testes que não estão fazendo nada, ignora o test e aparece como 'skiped' no console
	public void deveInteragirComLinks() {
		
		dsl.clicarLink("Voltar");
		//Assert.fail();// Não esquecer que o teste não está fazendo nada, você falha ele para lembrar de que ele está incompleto 
		Assert.assertEquals("Voltou!", dsl.obterTexto("resultado"));
	}
	
	@Test
	public void deveBuscarTextosNaPagina() {
		
		//System.out.println(driver.findElement(By.tagName("body")).getText());// Retorna todo o texto dentro do <body> da página
		//Assert.assertTrue(driver.findElement(By.tagName("body")).getText().contains("Campo de Treinamento"));
		//Assert.assertEquals("Cuidado onde clica, muitas armadilhas...", driver.findElement(By.tagName("span")).getText()); //Existe mais de um 'span', ele retorna qual foi o primeiro encontrado
		Assert.assertEquals("Campo de Treinamento", dsl.obterTexto(By.tagName("h3")));
		Assert.assertEquals("Cuidado onde clica, muitas armadilhas...", dsl.obterTexto(By.className("facilAchar")));
	}
	
}

