import java.util.List;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class TesteCampoTreinamento {
	
	private WebDriver driver;
	
	@Before
	public void inicializaChrome() {
		System.setProperty("webdriver.chrome.driver","C:/Users/IBM_ADMIN/Documents/WEBDRIVER/chromedriver.exe");
		WebDriver driver = new ChromeDriver();
		driver.manage().window().setSize(new Dimension(1200, 765));
		driver.get("file:///" + System.getProperty("user.dir") +  "/src/main/resources/componentes.html");
	}
	
	@After
	public void finaliza() {
		driver.quit();
	}
	
	@Test
	public void testeTextField() {
		/*System.setProperty("webdriver.gecko.driver","C:/Users/IBM_ADMIN/Documents/WEBDRIVER/geckodriver.exe"); //Só usar caso não funcione a definição de PATH no SO(Esse aqui é pra Firefox)
		WebDriver driver = new FirefoxDriver(); 
		System.setProperty("webdriver.chrome.driver","C:/Users/IBM_ADMIN/Documents/WEBDRIVER/chromedriver.exe");
		WebDriver driver = new ChromeDriver();
		
		driver.manage().window().setSize(new Dimension(1200, 765)); // Define o tamanho d atela
		//driver.get("file:///C:/Users/PedroSilvaFrei/Desktop/Selenium%20Webdriver/componentes.html");// Usar este caso tenha que abrir o arquivo direto de uma pasta por exemplo
		driver.get("file:///" + System.getProperty("user.dir") +  "/src/main/resources/componentes.html");// user.dir retorna o caminho relativo ao projeto
		*/
		
		driver.findElement(By.id("elementosForm:nome")).sendKeys("Teste de escrita");
		Assert.assertEquals("Teste de escrit", driver.findElement(By.id("elementosForm:nome")).getAttribute("value"));
	}
	
	@Test
	public void deveInteragirComTextArea() {
		driver.findElement(By.id("elementosForm:sugestoes")).sendKeys("Teste 1\nTeste 2");
		Assert.assertEquals("Teste 1\nTeste 2", driver.findElement(By.id("elementosForm:sugestoes")).getAttribute("value"));
	}
	
	@Test
	public void deveInteragirComRadioButton() {
		
		driver.findElement(By.id("elementosForm:sexo:0")).click();
		Assert.assertTrue(driver.findElement(By.id("elementosForm:sexo:0")).isSelected());
	}
	
	@Test
	public void deveInteragirComCheckbox() {
		
		driver.findElement(By.id("elementosForm:comidaFavorita:2")).click();
		Assert.assertTrue(driver.findElement(By.id("elementosForm:comidaFavorita:2")).isSelected());
	}
	
	@Test
	public void deveInteragirComCombo() {
		
		WebElement element = driver.findElement(By.id("elementosForm:escolaridade"));
		Select combo = new Select(element);
		//combo.selectByIndex(2);// Busca pelo index que é a ordem que está no combobox 
		//combo.selectByValue("superior"); // Busca pelo Value dentro do código
		combo.selectByVisibleText("2o grau completo"); // Procura pelo texto que está sendo mostrado pro usuario	
		Assert.assertEquals("2o grau completo", combo.getFirstSelectedOption().getText());
	}
	
	@Test
	public void deveVerificarValoresCombo() {
		WebElement element = driver.findElement(By.id("elementosForm:escolaridade"));
		Select combo = new Select(element);
		List<WebElement> options = combo.getOptions();
		Assert.assertEquals(8, options.size());
		
		boolean encontrou = false; //Declara como false para quando encontrar a opção desejada ele muda para True
		for(WebElement option: options) {
			if(option.getText().equals("Mestrado")){ //Encontrando "Mestrado" e mudando a variavel para True
				encontrou = true;
				break;
			}
		}
		Assert.assertTrue(encontrou);//Verificar se o boolean 'encontrou' vai retornar True 
	}
	
	@Test
	public void deveVerificarValoresComboMultiplo() {		
		WebElement element = driver.findElement(By.id("elementosForm:esportes"));
		Select combo = new Select(element);
		
		//Selecionar 3 opções do campo 'Pratica esportes?'
		combo.selectByVisibleText("Natacao");
		combo.selectByVisibleText("Corrida");
		combo.selectByVisibleText("O que eh esporte?");
		
		List<WebElement> allSelectedOptions = combo.getAllSelectedOptions(); //Cria uma lista com todas opções selecionadas(3)
		Assert.assertEquals(3, allSelectedOptions.size()); // Verifica se tem 3 itens selecionados
		
		combo.deselectByVisibleText("Corrida");//Desmarcar a opção 'Corrida'
		allSelectedOptions = combo.getAllSelectedOptions();
		Assert.assertEquals(2, allSelectedOptions.size()); // Verifica se tem 2 botões selecionados
	}
	
	@Test
	public void deveInteragirComBotoes() {
		WebElement botao = driver.findElement(By.id("buttonSimple")); //instancia um WebElement botao. Encontra o botão pelo ID
		botao.click(); // Clica no botão
		Assert.assertEquals("Obrigado!", botao.getAttribute("value"));
	}
	
	@Test
	//@Ignore //Não deixar rodar testes que não estão fazendo nada, ignora o test e aparece como 'skiped' no console
	public void deveInteragirComLinks() {
		
		driver.findElement(By.linkText("Voltar")).click();
		Assert.fail();// Não esquecer que o teste não está fazendo nada, você falha ele para lembrar de que ele está incompleto 
		Assert.assertEquals("Voltou!", driver.findElement(By.id("resultado")).getText());
	}
	
	@Test
	public void deveBuscarTextosNaPagina() {
		
		//System.out.println(driver.findElement(By.tagName("body")).getText());// Retorna todo o texto dentro do <body> da página
		//Assert.assertTrue(driver.findElement(By.tagName("body")).getText().contains("Campo de Treinamento"));
		//Assert.assertEquals("Campo de Treinamento", driver.findElement(By.tagName("h3")).getText());
		//Assert.assertEquals("Cuidado onde clica, muitas armadilhas...", driver.findElement(By.tagName("span")).getText()); //Existe mais de um 'span', ele retorna qual foi o primeiro encontrado
		
		Assert.assertEquals("Cuidado onde clica, muitas armadilhas...", driver.findElement(By.className("facilAchar")).getText());
	}
	
}

